const { Client, GatewayIntentBits, Events, ActionRowBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');

let config;
try {
    const configPath = path.join(__dirname, 'config.json');
    config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞:', error);
    process.exit(1);
}

if (!config.discord_api) {
    console.error('–¢–æ–∫–µ–Ω Discord API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ');
    process.exit(1);
}

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

const tempStorage = new Map();

client.once(Events.ClientReady, () => {
    console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
    console.log(`–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://discord.com/oauth2/authorize?client_id=${client.user.id}&scope=bot%20applications.commands`);
});

client.on(Events.MessageCreate, async message => {
    if (message.author.bot) return;

    if (message.content === '!botBuild') {
        try {
            const button = new ButtonBuilder()
                .setCustomId('openModal')
                .setLabel('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
                .setStyle(ButtonStyle.Primary);

            const row = new ActionRowBuilder().addComponents(button);

            const embed = new EmbedBuilder()
                .setTitle('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')
                .setDescription('–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∏–∂–µ')
                .setImage('https://cdn.discordapp.com/attachments/1299609343829737512/1345680608331956234/3195971296aa5178.jpg');

            await message.channel.send({ embeds: [embed], components: [row] });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π:', error);
        }
    }
});

async function handleApplicationModal(interaction) {
    try {
        const modal = new ModalBuilder()
            .setCustomId('sendModal')
            .setTitle('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤');

        const fields = [
            { id: 'name', label: '–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º', placeholder: 'karpen', style: TextInputStyle.Short },
            { id: 'age', label: '–í–æ–∑—Ä–∞—Å—Ç/—Å—Ç–∞–∂ –≤ –∏–≥—Ä–µ', placeholder: '17/10 –ª–µ—Ç', style: TextInputStyle.Short },
            { id: 'other', label: '–ò–≥—Ä–∞–ª–∏ –ª–∏ –Ω–∞ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö', placeholder: '–î–∞ / –ù–µ—Ç ...', style: TextInputStyle.Short },
            { id: 'time', label: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä', placeholder: '2 - 3 —á–∞—Å–∞ –≤ –¥–µ–Ω—å', style: TextInputStyle.Short },
            { id: 'un', label: '–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—Å', placeholder: '–Ø —Ö–æ—Ä–æ—à–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å, —É–º–µ—é...', style: TextInputStyle.Paragraph }
        ];

        fields.forEach(field => {
            const input = new TextInputBuilder()
                .setCustomId(field.id)
                .setLabel(field.label)
                .setPlaceholder(field.placeholder)
                .setStyle(field.style);

            const row = new ActionRowBuilder().addComponents(input);
            modal.addComponents(row);
        });

        await interaction.showModal(modal);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã.', ephemeral: true });
    }
}

async function handleSubmittedApplication(interaction) {
    try {
        const name = interaction.fields.getTextInputValue('name');
        const age = interaction.fields.getTextInputValue('age');
        const other = interaction.fields.getTextInputValue('other');
        const unique = interaction.fields.getTextInputValue('un');
        const time = interaction.fields.getTextInputValue('time');

        const member = await interaction.guild.members.fetch(interaction.user.id);

        try {
            await member.setNickname(name);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º:', error);
        }

        const waitingRole = interaction.guild.roles.cache.find(r => r.name === 'waiting');
        if (waitingRole) {
            try {
                await member.roles.add(waitingRole);
            } catch (error) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –æ–∂–∏–¥–∞–Ω–∏—è:', error);
            }
        }

        const applicationChannel = client.channels.cache.get(config.application_chan);
        if (!applicationChannel) {
            throw new Error('–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const acceptButton = new ButtonBuilder()
            .setCustomId('accept')
            .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
            .setStyle(ButtonStyle.Success);

        const rejectButton = new ButtonBuilder()
            .setCustomId('reject')
            .setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
            .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(acceptButton, rejectButton);

        await applicationChannel.send({
            content: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${interaction.user} (${name}):\n` +
                `–í–æ–∑—Ä–∞—Å—Ç: ${age}\n` +
                `–î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: ${other}\n` +
                `–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${time}\n` +
                `–ß—Ç–æ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—É: ${unique}\n` +
                `ID: ${interaction.user.id}`,
            components: [row],
        });

        await interaction.reply({ content: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!', ephemeral: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.', ephemeral: true });
    }
}

async function handleAcceptApplication(interaction) {
    try {
        const content = interaction.message.content;
        const applicantId = content.match(/ID: (\d+)/)?.[1];

        if (!applicantId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }

        const member = await interaction.guild.members.fetch(applicantId);

        const res = await fetch(`http://localhost:9010/api/allow?name=${member.displayName}&key=${config.api_key}`);
        if (!res.ok){
            console.error("Failed fetch");
        }

        const data = res.text();

        if (data !== "Success"){
            console.error("Filed add to whitelist");
        }

        const playerRole = interaction.guild.roles.cache.find(r => r.name === 'Player');
        if (playerRole) {
            await member.roles.add(playerRole);
        }

        const waitingRole = interaction.guild.roles.cache.find(r => r.name === 'waiting');
        if (waitingRole) {
            await member.roles.remove(waitingRole);
        }

        await interaction.message.delete();

        const responseChannel = client.channels.cache.get(config.res_chan);
        if (responseChannel) {
            const infoButton = new ButtonBuilder()
                .setCustomId(`info_${applicantId}`)
                .setLabel('–ß—Ç–æ –¥–∞–ª—å—à–µ?')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(infoButton);

            await responseChannel.send({
                content: `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${member.toString()} –ø—Ä–∏–Ω—è—Ç.`,
                components: [row]
            });
        }

        await interaction.reply({ content: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', ephemeral: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏.', ephemeral: true });
    }
}

async function handleRejectApplication(interaction) {
    try {
        const modal = new ModalBuilder()
            .setCustomId('rejectModal')
            .setTitle('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏');

        const reasonInput = new TextInputBuilder()
            .setCustomId('reason')
            .setStyle(TextInputStyle.Paragraph)
            .setPlaceholder('–í—ã –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ...')
            .setLabel('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(reasonInput);
        modal.addComponents(row);

        tempStorage.set(interaction.user.id, {
            messageId: interaction.message.id
        });

        await interaction.showModal(modal);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.', ephemeral: true });
    }
}

async function handleRejectModal(interaction) {
    try {
        const reason = interaction.fields.getTextInputValue('reason');
        const storedData = tempStorage.get(interaction.user.id);

        if (!storedData) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        }

        const applicationMessage = await interaction.channel.messages.fetch(storedData.messageId);
        const content = applicationMessage.content;
        const applicantId = content.match(/ID: (\d+)/)?.[1];

        if (!applicantId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }

        const member = await interaction.guild.members.fetch(applicantId);

        const waitingRole = interaction.guild.roles.cache.find(r => r.name === 'waiting');
        if (waitingRole) {
            await member.roles.remove(waitingRole);
        }

        await applicationMessage.delete();

        const responseChannel = client.channels.cache.get(config.res_chan);
        if (responseChannel) {
            tempStorage.set(applicantId, { reason });

            const infoButton = new ButtonBuilder()
                .setCustomId(`rejectReason_${applicantId}`)
                .setLabel('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞')
                .setStyle(ButtonStyle.Secondary);

            const row = new ActionRowBuilder().addComponents(infoButton);

            await responseChannel.send({
                content: `‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${member.toString()} –Ω–µ –ø—Ä–∏–Ω—è—Ç.`,
                components: [row]
            });
        }

        await interaction.reply({ content: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!', ephemeral: true });
        tempStorage.delete(interaction.user.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.', ephemeral: true });
    }
}

async function handleInfoButton(interaction) {
    try {
        const [action, userId] = interaction.customId.split('_');

        if (action === 'info') {
            await interaction.reply({
                content: `–í—ã –ø—Ä–∏–Ω—è—Ç—ã, –≤–∞—à –Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —á–∏—Ç–∞–π—Ç–µ <#1338192259010789526>`,
                ephemeral: true
            });
        } else if (action === 'rejectReason') {
            const storedData = tempStorage.get(userId);
            if (storedData?.reason) {
                await interaction.reply({
                    content: `–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: ${storedData.reason}`,
                    ephemeral: true
                });
            } else {
                await interaction.reply({
                    content: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.',
                    ephemeral: true
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏:', error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', ephemeral: true });
    }
}

client.on(Events.InteractionCreate, async interaction => {
    try {
        if (interaction.isButton() && interaction.customId === 'openModal') {
            if (config.allowed === false) {
                await interaction.reply({ content: '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', ephemeral: true });
            } else {
                await handleApplicationModal(interaction);
            }
        }
        else if (interaction.isModalSubmit() && interaction.customId === 'sendModal') {
            await handleSubmittedApplication(interaction);
        }
        else if (interaction.isButton() && interaction.customId === 'accept') {
            await handleAcceptApplication(interaction);
        }
        else if (interaction.isButton() && interaction.customId === 'reject') {
            await handleRejectApplication(interaction);
        }
        else if (interaction.isModalSubmit() && interaction.customId === 'rejectModal') {
            await handleRejectModal(interaction);
        }
        else if (interaction.isButton() && (interaction.customId.startsWith('info_') || interaction.customId.startsWith('rejectReason_'))) {
            await handleInfoButton(interaction);
        }
    } catch (error) {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ InteractionCreate:', error);
        if (interaction.isRepliable()) {
            await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.', ephemeral: true });
        }
    }
});

client.login(config.discord_api).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    process.exit(1);
});

process.on('unhandledRejection', error => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', error);
});